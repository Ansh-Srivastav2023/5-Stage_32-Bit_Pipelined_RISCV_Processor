$date
	Sat Oct 18 18:35:03 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Testbench $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 5 # rs2_ID [4:0] $end
$var wire 5 $ rs1_ID [4:0] $end
$var wire 32 % rf_data2 [31:0] $end
$var wire 32 & rf_data1 [31:0] $end
$var wire 5 ' rd_ID_EX_EX [4:0] $end
$var wire 5 ( rd_ID [4:0] $end
$var wire 5 ) rd_EXMEM_MEM [4:0] $end
$var wire 32 * rdB_ForwB [31:0] $end
$var wire 32 + rdB [31:0] $end
$var wire 32 , rdA [31:0] $end
$var wire 1 - is_compressed $end
$var wire 2 . isPC_select_ID [1:0] $end
$var wire 2 / isPC_select [1:0] $end
$var wire 32 0 instruction_IF [31:0] $end
$var wire 32 1 instruction_ID [31:0] $end
$var wire 32 2 instruction [31:0] $end
$var wire 32 3 initial_instr [31:0] $end
$var wire 32 4 data2_ID [31:0] $end
$var wire 32 5 data2_EX [31:0] $end
$var wire 32 6 data2 [31:0] $end
$var wire 32 7 data1_ID_ForwA [31:0] $end
$var wire 32 8 data1_ID [31:0] $end
$var wire 32 9 data1 [31:0] $end
$var wire 32 : compress_instr [31:0] $end
$var wire 1 ; Zero_EX $end
$var wire 1 < Zero $end
$var wire 2 = ResultSrc_MEM [1:0] $end
$var wire 2 > ResultSrc_ID [1:0] $end
$var wire 2 ? ResultSrc_EX [1:0] $end
$var wire 2 @ ResultSrcHZ [1:0] $end
$var wire 2 A ResultSrc [1:0] $end
$var wire 32 B Result [31:0] $end
$var wire 1 C RegWrite_MEM $end
$var wire 1 D RegWrite_ID $end
$var wire 1 E RegWrite_EX $end
$var wire 1 F RegWriteHZ $end
$var wire 1 G RegWrite $end
$var wire 32 H PC_next_MEM [31:0] $end
$var wire 32 I PC_next_IF [31:0] $end
$var wire 32 J PC_next_ID [31:0] $end
$var wire 32 K PC_next_EX [31:0] $end
$var wire 32 L PC_next [31:0] $end
$var wire 32 M PC_MEM [31:0] $end
$var wire 32 N PC_IF [31:0] $end
$var wire 32 O PC_ID [31:0] $end
$var wire 32 P PC_EX [31:0] $end
$var wire 32 Q PC_Branch [31:0] $end
$var wire 32 R PC_ALU_Sum_EX [31:0] $end
$var wire 32 S PC_ALU_Sum [31:0] $end
$var wire 1 T PCWriteEN $end
$var wire 1 U PCSrc_EX $end
$var wire 1 V PCSrc $end
$var wire 32 W PCPlus4 [31:0] $end
$var wire 32 X PC [31:0] $end
$var wire 1 Y NOP $end
$var wire 2 Z Mem_Con_ID [1:0] $end
$var wire 2 [ Mem_Con_EX [1:0] $end
$var wire 1 \ MemWriteHZ $end
$var wire 1 ] MemWrite $end
$var wire 1 ^ MemReadHZ $end
$var wire 32 _ MemReadData_MEM [31:0] $end
$var wire 32 ` MemReadData [31:0] $end
$var wire 1 a MemRead $end
$var wire 1 b Jump_ID $end
$var wire 1 c JumpReg_ID $end
$var wire 1 d JumpRegHZ $end
$var wire 1 e JumpReg $end
$var wire 1 f JumpHZ $end
$var wire 1 g Jump $end
$var wire 3 h ImmType_ID [2:0] $end
$var wire 3 i ImmTypeHZ [2:0] $end
$var wire 3 j ImmType [2:0] $end
$var wire 32 k ImmExt_ID [31:0] $end
$var wire 32 l ImmExt [31:0] $end
$var wire 1 m IF_ID_WriteEN $end
$var wire 2 n ForwardB [1:0] $end
$var wire 2 o ForwardA [1:0] $end
$var wire 1 p Flush $end
$var wire 1 q Carry $end
$var wire 1 r Branch_ID $end
$var wire 1 s Branch_EX $end
$var wire 1 t BranchHZ $end
$var wire 1 u Branch $end
$var wire 1 v B_Zero_ID $end
$var wire 1 w B_Zero $end
$var wire 32 x ALUresult_MEM [31:0] $end
$var wire 32 y ALUresult_EX [31:0] $end
$var wire 32 z ALUresult [31:0] $end
$var wire 1 { ALUSrc_ID $end
$var wire 1 | ALUSrcHZ $end
$var wire 1 } ALUSrc $end
$var wire 5 ~ ALUControl_ID [4:0] $end
$var wire 5 !" ALUControlHZ [4:0] $end
$var wire 5 "" ALUControl [4:0] $end
$scope module ALU $end
$var wire 1 q Carry $end
$var wire 5 #" shamt [4:0] $end
$var wire 32 $" rdB [31:0] $end
$var wire 32 %" rdA [31:0] $end
$var wire 64 &" mul_result [63:0] $end
$var wire 1 < Zero $end
$var wire 5 '" ALUControl [4:0] $end
$var reg 32 (" ALUresult [31:0] $end
$var reg 1 )" Cout $end
$upscope $end
$scope module Control_Unit $end
$var wire 3 *" funct3 [2:0] $end
$var wire 7 +" funct7 [6:0] $end
$var wire 7 ," opcode [6:0] $end
$var wire 1 " rst $end
$var wire 5 -" r_type_ALUControl [4:0] $end
$var reg 5 ." ALUControl [4:0] $end
$var reg 1 } ALUSrc $end
$var reg 1 w B_Zero $end
$var reg 1 u Branch $end
$var reg 3 /" ImmType [2:0] $end
$var reg 1 g Jump $end
$var reg 1 e JumpReg $end
$var reg 1 a MemRead $end
$var reg 1 ] MemWrite $end
$var reg 1 G RegWrite $end
$var reg 2 0" ResultSrc [1:0] $end
$var reg 2 1" isPC_select [1:0] $end
$scope module r_type_alu_ctrl_inst $end
$var wire 3 2" funct3 [2:0] $end
$var wire 7 3" funct7 [6:0] $end
$var reg 5 4" ALUControl [4:0] $end
$upscope $end
$upscope $end
$scope module Ctrl_Mux $end
$var wire 5 5" ALUControl [4:0] $end
$var wire 1 } ALUSrc $end
$var wire 1 u Branch $end
$var wire 3 6" ImmType [2:0] $end
$var wire 1 g Jump $end
$var wire 1 e JumpReg $end
$var wire 1 a MemRead $end
$var wire 1 ] MemWrite $end
$var wire 1 G RegWrite $end
$var wire 2 7" ResultSrc [1:0] $end
$var wire 1 Y sel $end
$var wire 2 8" ResultSrcHZ [1:0] $end
$var wire 1 F RegWriteHZ $end
$var wire 1 \ MemWriteHZ $end
$var wire 1 ^ MemReadHZ $end
$var wire 1 d JumpRegHZ $end
$var wire 1 f JumpHZ $end
$var wire 3 9" ImmTypeHZ [2:0] $end
$var wire 1 t BranchHZ $end
$var wire 1 | ALUSrcHZ $end
$var wire 5 :" ALUControlHZ [4:0] $end
$upscope $end
$scope module Data_Memory $end
$var wire 1 ;" MemRead $end
$var wire 1 <" MemWrite $end
$var wire 1 ! clk $end
$var wire 32 =" MemWriteData [31:0] $end
$var wire 32 >" MemReadData [31:0] $end
$var wire 32 ?" ALUresult [31:0] $end
$upscope $end
$scope module Decomp_Mux $end
$var wire 2 @" instr [1:0] $end
$var wire 1 - is_compressed $end
$upscope $end
$scope module Decompressor $end
$var wire 16 A" c_instr [15:0] $end
$var wire 5 B" rs2_prime [4:0] $end
$var wire 5 C" rs2 [4:0] $end
$var wire 5 D" rs1_prime [4:0] $end
$var wire 5 E" rs1 [4:0] $end
$var wire 5 F" rd_prime [4:0] $end
$var wire 5 G" rd [4:0] $end
$var wire 2 H" op [1:0] $end
$var wire 3 I" funct3 [2:0] $end
$var reg 3 J" final_funct3 [2:0] $end
$var reg 7 K" final_funct7 [6:0] $end
$var reg 7 L" final_opcode [6:0] $end
$var reg 5 M" final_rd [4:0] $end
$var reg 5 N" final_rs1 [4:0] $end
$var reg 5 O" final_rs2 [4:0] $end
$var reg 32 P" imm32 [31:0] $end
$var reg 32 Q" r_instr [31:0] $end
$upscope $end
$scope module EXMEM $end
$var wire 32 R" ALUresult [31:0] $end
$var wire 1 V PCSrc $end
$var wire 1 < Zero $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 5 S" rd_ID_EX [4:0] $end
$var wire 32 T" data2 [31:0] $end
$var wire 2 U" ResultSrc [1:0] $end
$var wire 1 D RegWrite $end
$var wire 32 V" PC_next_ID [31:0] $end
$var wire 32 W" PC_ALU_Sum [31:0] $end
$var wire 32 X" PC [31:0] $end
$var wire 2 Y" Mem_Con [1:0] $end
$var wire 1 r Branch $end
$var reg 32 Z" ALUresult_EX [31:0] $end
$var reg 1 s Branch_EX $end
$var reg 2 [" Mem_Con_EX [1:0] $end
$var reg 1 U PCSrc_EX $end
$var reg 32 \" PC_ALU_Sum_EX [31:0] $end
$var reg 32 ]" PC_EX [31:0] $end
$var reg 32 ^" PC_next_EX [31:0] $end
$var reg 1 E RegWrite_EX $end
$var reg 2 _" ResultSrc_EX [1:0] $end
$var reg 1 ; Zero_EX $end
$var reg 32 `" data2_EX [31:0] $end
$var reg 5 a" rd_ID_EX_EX [4:0] $end
$upscope $end
$scope module FB $end
$var wire 1 E EX_MEM_RegWrite $end
$var wire 5 b" EX_MEM_rd [4:0] $end
$var wire 5 c" MEM_WB_rd [4:0] $end
$var wire 1 C MEM_WB_RegWrite $end
$var wire 5 d" ID_EX_rs2 [4:0] $end
$var wire 5 e" ID_EX_rs1 [4:0] $end
$var wire 2 f" ForwardB [1:0] $end
$var wire 2 g" ForwardA [1:0] $end
$upscope $end
$scope module ForwA_mux $end
$var wire 32 h" C [31:0] $end
$var wire 2 i" sel [1:0] $end
$var wire 32 j" Out [31:0] $end
$var wire 32 k" B [31:0] $end
$var wire 32 l" A [31:0] $end
$upscope $end
$scope module ForwB_mux $end
$var wire 32 m" C [31:0] $end
$var wire 2 n" sel [1:0] $end
$var wire 32 o" Out [31:0] $end
$var wire 32 p" B [31:0] $end
$var wire 32 q" A [31:0] $end
$upscope $end
$scope module Haz_Det $end
$var wire 1 r" Branch $end
$var wire 1 s" ID_EX_MemRead $end
$var wire 5 t" IF_ID_rs1 [4:0] $end
$var wire 5 u" IF_ID_rs2 [4:0] $end
$var wire 1 c JumpReg $end
$var wire 1 b Jump $end
$var wire 5 v" ID_EX_rd [4:0] $end
$var reg 1 p Flush $end
$var reg 1 m IF_ID_WriteEN $end
$var reg 1 Y NOP $end
$var reg 1 T PCWriteEN $end
$upscope $end
$scope module IDEX $end
$var wire 5 w" ALUControlHZ [4:0] $end
$var wire 1 | ALUSrc $end
$var wire 1 w B_Zero $end
$var wire 1 t BranchHZ $end
$var wire 1 p Flush $end
$var wire 3 x" ImmTypeHZ [2:0] $end
$var wire 1 f JumpHZ $end
$var wire 1 d JumpRegHZ $end
$var wire 2 y" Mem_Con [1:0] $end
$var wire 1 F RegWrite $end
$var wire 2 z" ResultSrcHZ [1:0] $end
$var wire 1 ! clk $end
$var wire 32 {" data1 [31:0] $end
$var wire 32 |" data2 [31:0] $end
$var wire 32 }" instruction [31:0] $end
$var wire 2 ~" isPC_select [1:0] $end
$var wire 5 !# rd [4:0] $end
$var wire 5 "# rs1 [4:0] $end
$var wire 5 ## rs2 [4:0] $end
$var wire 1 " rst $end
$var wire 32 $# PC_next_IF [31:0] $end
$var wire 32 %# PC [31:0] $end
$var wire 32 &# ImmExt [31:0] $end
$var reg 5 '# ALUControl_ID [4:0] $end
$var reg 1 { ALUSrc_ID $end
$var reg 1 v B_Zero_ID $end
$var reg 1 r Branch_ID $end
$var reg 32 (# ImmExt_ID [31:0] $end
$var reg 3 )# ImmType_ID [2:0] $end
$var reg 1 c JumpReg_ID $end
$var reg 1 b Jump_ID $end
$var reg 2 *# Mem_Con_ID [1:0] $end
$var reg 32 +# PC_ID [31:0] $end
$var reg 32 ,# PC_next_ID [31:0] $end
$var reg 1 D RegWrite_ID $end
$var reg 2 -# ResultSrc_ID [1:0] $end
$var reg 32 .# data1_ID [31:0] $end
$var reg 32 /# data2_ID [31:0] $end
$var reg 32 0# instruction_ID [31:0] $end
$var reg 2 1# isPC_select_ID [1:0] $end
$var reg 5 2# rd_ID [4:0] $end
$var reg 5 3# rs1_ID [4:0] $end
$var reg 5 4# rs2_ID [4:0] $end
$upscope $end
$scope module IFID $end
$var wire 1 p Flush $end
$var wire 1 m IF_ID_WriteEN $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 5# instruction [31:0] $end
$var wire 32 6# PC_next [31:0] $end
$var wire 32 7# PC [31:0] $end
$var reg 32 8# PC_IF [31:0] $end
$var reg 32 9# PC_next_IF [31:0] $end
$var reg 32 :# instruction_IF [31:0] $end
$upscope $end
$scope module Imm0 $end
$var wire 3 ;# ImmType [2:0] $end
$var wire 32 <# instruction [31:0] $end
$var wire 20 =# u_imm [19:0] $end
$var wire 12 ># s_imm [11:0] $end
$var wire 20 ?# j_imm [19:0] $end
$var wire 12 @# i_imm [11:0] $end
$var wire 13 A# b_imm [12:0] $end
$var reg 32 B# ImmExt [31:0] $end
$upscope $end
$scope module Inst_Mem $end
$var wire 1 " rst $end
$var wire 32 C# instruction [31:0] $end
$var wire 32 D# PC [31:0] $end
$upscope $end
$scope module MEMWB $end
$var wire 32 E# ALUresult [31:0] $end
$var wire 32 F# MemReadData [31:0] $end
$var wire 32 G# PC [31:0] $end
$var wire 32 H# PC_next_EX [31:0] $end
$var wire 1 E RegWrite $end
$var wire 2 I# ResultSrc [1:0] $end
$var wire 1 ! clk $end
$var wire 5 J# rd_EXMEM [4:0] $end
$var wire 1 " rst $end
$var reg 32 K# ALUresult_MEM [31:0] $end
$var reg 32 L# MemReadData_MEM [31:0] $end
$var reg 32 M# PC_MEM [31:0] $end
$var reg 32 N# PC_next_MEM [31:0] $end
$var reg 1 C RegWrite_MEM $end
$var reg 2 O# ResultSrc_MEM [1:0] $end
$var reg 5 P# rd_EXMEM_MEM [4:0] $end
$upscope $end
$scope module MUX_PC_Data $end
$var wire 32 Q# A [31:0] $end
$var wire 32 R# B [31:0] $end
$var wire 32 S# C [31:0] $end
$var wire 32 T# D [31:0] $end
$var wire 2 U# sel [1:0] $end
$var wire 32 V# Result [31:0] $end
$upscope $end
$scope module MultiPC $end
$var wire 1 V sel $end
$var wire 32 W# Out [31:0] $end
$var wire 32 X# B [31:0] $end
$var wire 32 Y# A [31:0] $end
$upscope $end
$scope module Multiplex_ALU $end
$var wire 32 Z# A [31:0] $end
$var wire 32 [# B [31:0] $end
$var wire 1 { sel $end
$var wire 32 \# Out [31:0] $end
$upscope $end
$scope module Multiplex_jump_branch $end
$var wire 32 ]# B [31:0] $end
$var wire 1 c sel $end
$var wire 32 ^# Out [31:0] $end
$var wire 32 _# A [31:0] $end
$upscope $end
$scope module PC0 $end
$var wire 1 T PCWrite $end
$var wire 32 `# PC_next [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 a# PC [31:0] $end
$upscope $end
$scope module PC_ALU_Adder0 $end
$var wire 32 b# A [31:0] $end
$var wire 32 c# B [31:0] $end
$var wire 32 d# Sum [31:0] $end
$upscope $end
$scope module PCplus4 $end
$var wire 32 e# PC [31:0] $end
$var wire 1 " rst $end
$var wire 32 f# PCPlus4 [31:0] $end
$upscope $end
$scope module Register $end
$var wire 1 C RegWrite $end
$var wire 1 ! clk $end
$var wire 5 g# rs1 [4:0] $end
$var wire 5 h# rs2 [4:0] $end
$var wire 1 " rst $end
$var wire 5 i# w_add [4:0] $end
$var wire 32 j# data2 [31:0] $end
$var wire 32 k# data1 [31:0] $end
$var wire 32 l# RegWriteData [31:0] $end
$upscope $end
$scope module compressed_mupltiplex $end
$var wire 32 m# A [31:0] $end
$var wire 32 n# B [31:0] $end
$var wire 1 - sel $end
$var wire 32 o# Out [31:0] $end
$upscope $end
$scope module multipplex_result0 $end
$var wire 32 p# A [31:0] $end
$var wire 32 q# B [31:0] $end
$var wire 32 r# C [31:0] $end
$var wire 32 s# D [31:0] $end
$var wire 2 t# sel [1:0] $end
$var wire 32 u# Result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 u#
b0 t#
b0 s#
b0 r#
b0 q#
b0 p#
b10000010000010011 o#
b10000010000010011 n#
b0 m#
b0 l#
b0 k#
b0 j#
b0 i#
b0 h#
b0 g#
b0 f#
b0 e#
b0 d#
b0 c#
b0 b#
b0 a#
b0 `#
b0 _#
b0 ^#
b0 ]#
b0 \#
b0 [#
b0 Z#
b0 Y#
b0 X#
b0 W#
b0 V#
b0 U#
b0 T#
b0 S#
b0 R#
b0 Q#
b0 P#
b0 O#
b0 N#
b0 M#
b0 L#
b0 K#
b0 J#
b0 I#
b0 H#
b0 G#
b0 F#
b0 E#
b0 D#
b0 C#
b0 B#
b0 A#
b0 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b0 ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b10000010000010011 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
0s"
0r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b10000010000010011 Q"
b0 P"
b0 O"
b10 N"
b1000 M"
b10011 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b1000 F"
b0 E"
b1000 D"
b0 C"
b1000 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
0<"
0;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
0)"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
0}
0|
0{
b0 z
b0 y
b0 x
0w
0v
0u
0t
0s
0r
0q
0p
b0 o
b0 n
1m
b0 l
b0 k
b0 j
b0 i
b0 h
0g
0f
0e
0d
0c
0b
0a
b0 `
b0 _
0^
0]
0\
b0 [
b0 Z
0Y
b0 X
b0 W
0V
0U
1T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
0G
0F
0E
0D
0C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
1<
0;
b10000010000010011 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b10000010000010011 2
b0 1
b0 0
b0 /
b0 .
1-
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
0"
1!
$end
#2
b1100000000000010010011 2
b1100000000000010010011 5#
b1100000000000010010011 o#
0-
b0 :
b0 Q"
b0 n#
b0 L"
b0 M"
b0 N"
b11 H"
b1 G"
b1 E"
b100 C"
b1100 F"
b1001 D"
b1100 B"
b11 @"
b10010011 A"
b100 L
b100 6#
b100 W#
b100 `#
b1100000000000010010011 3
b1100000000000010010011 C#
b1100000000000010010011 m#
b100 W
b100 Y#
b100 f#
1"
#5
0!
#10
1|
1F
b10 G"
b10 E"
b1010 D"
bx 6
bx |"
b10100000000000100010011 2
b10100000000000100010011 5#
b10100000000000100010011 o#
b100010011 A"
b11 l
b11 &#
b11 B#
bx %
bx j#
1}
1G
b1000 L
b1000 6#
b1000 W#
b1000 `#
b10100000000000100010011 3
b10100000000000100010011 C#
b10100000000000100010011 m#
b11 @#
b1 >#
b100000000000 A#
b1100000000 =#
b10000000001 ?#
b11 u"
b1 !#
b11 ##
b11 h#
b10011 ,"
b1000 W
b1000 Y#
b1000 f#
1;
b100 I
b100 $#
b100 9#
b1100000000000010010011 }"
b1100000000000010010011 0
b1100000000000010010011 :#
b1100000000000010010011 <#
b100 X
b100 7#
b100 D#
b100 a#
b100 e#
1!
#15
0!
#20
b100 I"
b11 G"
b11 E"
b1100 C"
b1011 D"
b1000001000000110110011 2
b1000001000000110110011 5#
b1000001000000110110011 o#
b1000000110110011 A"
b1100 L
b1100 6#
b1100 W#
b1100 `#
b1000001000000110110011 3
b1000001000000110110011 C#
b1000001000000110110011 m#
b101 l
b101 &#
b101 B#
b11 #"
0<
b11 z
b11 ("
b11 R"
b11 ]#
b1100 W
b1100 Y#
b1100 f#
b101 @#
b10 >#
b10 A#
b10100000000 =#
b10000000010 ?#
b101 u"
b10 !#
b101 ##
b101 h#
b11 +
b11 $"
b11 \#
bx *
bx T"
bx o"
bx Z#
b11 S
b11 W"
b11 X#
b11 ^#
b1000 X
b1000 7#
b1000 D#
b1000 a#
b1000 e#
b1000 I
b1000 $#
b1000 9#
b100 N
b100 %#
b100 8#
b10100000000000100010011 }"
b10100000000000100010011 0
b10100000000000100010011 :#
b10100000000000100010011 <#
b100 J
b100 V"
b100 ,#
b1 (
b1 S"
b1 v"
b1 2#
1{
b11 #
b11 d"
b11 4#
1D
bx 4
bx q"
bx /#
b11 Q
b11 _#
b11 d#
b11 k
b11 (#
b11 [#
b11 c#
b1100000000000010010011 1
b1100000000000010010011 0#
1!
#25
0!
#30
0|
x-
bx H"
bx I"
bx G"
bx E"
bx C"
b1xxx F"
b1xxx D"
b1xxx B"
bx 9
bx {"
bx 2
bx 5#
bx o#
bx @"
bx A"
b101 #"
0<
b101 z
b101 ("
b101 R"
b101 ]#
b10 l
b10 &#
b10 B#
bx &
bx k#
0}
b10000 L
b10000 6#
b10000 W#
b10000 `#
bx 3
bx C#
bx m#
b101 +
b101 $"
b101 \#
b1001 S
b1001 W"
b1001 X#
b1001 ^#
b10 @#
b11 >#
b100000000010 A#
b1000001000 =#
b100000000000001 ?#
b10 u"
b1 t"
b11 !#
b10 ##
b1 "#
b10 h#
b1 g#
b110011 ,"
b10000 W
b10000 Y#
b10000 f#
b100 K
b100 ^"
b100 H#
1E
b11 R
b11 \"
0;
b11 y
b11 ?"
b11 Z"
b11 h"
b11 m"
b11 E#
bx 5
bx ="
bx `"
b1 '
b1 a"
b1 b"
b1 J#
b1000 J
b1000 V"
b1000 ,#
b10 (
b10 S"
b10 v"
b10 2#
b101 #
b101 d"
b101 4#
b100 O
b100 X"
b100 +#
b100 R#
b100 b#
b1001 Q
b1001 _#
b1001 d#
b101 k
b101 (#
b101 [#
b101 c#
b10100000000000100010011 1
b10100000000000100010011 0#
b1100 I
b1100 $#
b1100 9#
b1000 N
b1000 %#
b1000 8#
b1000001000000110110011 }"
b1000001000000110110011 0
b1000001000000110110011 :#
b1000001000000110110011 <#
b1100 X
b1100 7#
b1100 D#
b1100 a#
b1100 e#
1!
#35
0!
#40
0F
b101 *
b101 T"
b101 o"
b101 Z#
b1 o
b1 g"
b1 i"
b10100 L
b10100 6#
b10100 W#
b10100 `#
bx l
bx &#
bx B#
0G
b10 n
b10 f"
b10 n"
b11 ,
b11 %"
b11 V#
b101 #"
0q
0)"
0<
b1000 z
b1000 ("
b1000 R"
b1000 ]#
bx 9
bx {"
b10100 W
b10100 Y#
b10100 f#
bx @#
bx >#
bx0 A#
bx =#
bx ?#
bx u"
bx t"
bx !#
bx ##
bx "#
bx h#
bx g#
bx +"
bx 3"
bx *"
bx 2"
bx ,"
b11 7
b11 j"
b11 Q#
b1111 &"
b101 +
b101 $"
b101 \#
b1010 S
b1010 W"
b1010 X#
b1010 ^#
b11 B
b11 k"
b11 p"
b11 l#
b11 u#
b10000 X
b10000 7#
b10000 D#
b10000 a#
b10000 e#
b10000 I
b10000 $#
b10000 9#
b1100 N
b1100 %#
b1100 8#
bx }"
bx 0
bx :#
bx <#
b1100 J
b1100 V"
b1100 ,#
b11 (
b11 S"
b11 v"
b11 2#
0{
b1 $
b1 e"
b1 3#
b10 #
b10 d"
b10 4#
b1000 O
b1000 X"
b1000 +#
b1000 R#
b1000 b#
bx 8
bx l"
bx .#
b1010 Q
b1010 _#
b1010 d#
b10 k
b10 (#
b10 [#
b10 c#
b1000001000000110110011 1
b1000001000000110110011 0#
b1000 K
b1000 ^"
b1000 H#
b100 P
b100 ]"
b100 G#
b1001 R
b1001 \"
b101 y
b101 ?"
b101 Z"
b101 h"
b101 m"
b101 E#
b10 '
b10 a"
b10 b"
b10 J#
b100 H
b100 N#
b100 r#
1C
b11 x
b11 K#
b11 p#
b1 )
b1 c"
b1 P#
b1 i#
1!
#45
0!
#50
bx #"
xq
x)"
x<
bx z
bx ("
bx R"
bx ]#
bx ,
bx %"
bx V#
bx &"
bx +
bx $"
bx \#
bx 7
bx j"
bx Q#
bx *
bx T"
bx o"
bx Z#
bx o
bx g"
bx i"
bx n
bx f"
bx n"
b11000 L
b11000 6#
b11000 W#
b11000 `#
b101 B
b101 k"
b101 p"
b101 l#
b101 u#
bx S
bx W"
bx X#
bx ^#
b11000 W
b11000 Y#
b11000 f#
b1000 H
b1000 N#
b1000 r#
b100 M
b100 M#
b101 x
b101 K#
b101 p#
b10 )
b10 c"
b10 P#
b10 i#
b1100 K
b1100 ^"
b1100 H#
b1000 P
b1000 ]"
b1000 G#
b1010 R
b1010 \"
b1000 y
b1000 ?"
b1000 Z"
b1000 h"
b1000 m"
b1000 E#
b101 5
b101 ="
b101 `"
b11 '
b11 a"
b11 b"
b11 J#
b10000 J
b10000 V"
b10000 ,#
bx (
bx S"
bx v"
bx 2#
bx $
bx e"
bx 3#
bx #
bx d"
bx 4#
0D
b1100 O
b1100 X"
b1100 +#
b1100 R#
b1100 b#
bx Q
bx _#
bx d#
bx k
bx (#
bx [#
bx c#
bx 1
bx 0#
b10100 I
b10100 $#
b10100 9#
b10000 N
b10000 %#
b10000 8#
b10100 X
b10100 7#
b10100 D#
b10100 a#
b10100 e#
1!
#55
0!
#60
b0x o
b0x g"
b0x i"
b0x n
b0x f"
b0x n"
b11100 L
b11100 6#
b11100 W#
b11100 `#
b11100 W
b11100 Y#
b11100 f#
b1000 B
b1000 k"
b1000 p"
b1000 l#
b1000 u#
b11000 X
b11000 7#
b11000 D#
b11000 a#
b11000 e#
b11000 I
b11000 $#
b11000 9#
b10100 N
b10100 %#
b10100 8#
b10100 J
b10100 V"
b10100 ,#
b10000 O
b10000 X"
b10000 +#
b10000 R#
b10000 b#
b10000 K
b10000 ^"
b10000 H#
b1100 P
b1100 ]"
b1100 G#
0E
bx R
bx \"
x;
bx y
bx ?"
bx Z"
bx h"
bx m"
bx E#
bx 5
bx ="
bx `"
bx '
bx a"
bx b"
bx J#
b1100 H
b1100 N#
b1100 r#
b1000 M
b1000 M#
b1000 x
b1000 K#
b1000 p#
b11 )
b11 c"
b11 P#
b11 i#
1!
#65
0!
#70
b0 n
b0 f"
b0 n"
b0 o
b0 g"
b0 i"
b100000 L
b100000 6#
b100000 W#
b100000 `#
bx B
bx k"
bx p"
bx l#
bx u#
b100000 W
b100000 Y#
b100000 f#
b10000 H
b10000 N#
b10000 r#
b1100 M
b1100 M#
0C
bx x
bx K#
bx p#
bx )
bx c"
bx P#
bx i#
b10100 K
b10100 ^"
b10100 H#
b10000 P
b10000 ]"
b10000 G#
b11000 J
b11000 V"
b11000 ,#
b10100 O
b10100 X"
b10100 +#
b10100 R#
b10100 b#
b11100 I
b11100 $#
b11100 9#
b11000 N
b11000 %#
b11000 8#
b11100 X
b11100 7#
b11100 D#
b11100 a#
b11100 e#
1!
#75
0!
#80
b100100 L
b100100 6#
b100100 W#
b100100 `#
b100100 W
b100100 Y#
b100100 f#
b100000 X
b100000 7#
b100000 D#
b100000 a#
b100000 e#
b100000 I
b100000 $#
b100000 9#
b11100 N
b11100 %#
b11100 8#
b11100 J
b11100 V"
b11100 ,#
b11000 O
b11000 X"
b11000 +#
b11000 R#
b11000 b#
b11000 K
b11000 ^"
b11000 H#
b10100 P
b10100 ]"
b10100 G#
b10100 H
b10100 N#
b10100 r#
b10000 M
b10000 M#
1!
#85
0!
#90
b101000 L
b101000 6#
b101000 W#
b101000 `#
b101000 W
b101000 Y#
b101000 f#
b11000 H
b11000 N#
b11000 r#
b10100 M
b10100 M#
b11100 K
b11100 ^"
b11100 H#
b11000 P
b11000 ]"
b11000 G#
b100000 J
b100000 V"
b100000 ,#
b11100 O
b11100 X"
b11100 +#
b11100 R#
b11100 b#
b100100 I
b100100 $#
b100100 9#
b100000 N
b100000 %#
b100000 8#
b100100 X
b100100 7#
b100100 D#
b100100 a#
b100100 e#
1!
#95
0!
#100
b101100 L
b101100 6#
b101100 W#
b101100 `#
b101100 W
b101100 Y#
b101100 f#
b101000 X
b101000 7#
b101000 D#
b101000 a#
b101000 e#
b101000 I
b101000 $#
b101000 9#
b100100 N
b100100 %#
b100100 8#
b100100 J
b100100 V"
b100100 ,#
b100000 O
b100000 X"
b100000 +#
b100000 R#
b100000 b#
b100000 K
b100000 ^"
b100000 H#
b11100 P
b11100 ]"
b11100 G#
b11100 H
b11100 N#
b11100 r#
b11000 M
b11000 M#
1!
#105
0!
#110
b110000 L
b110000 6#
b110000 W#
b110000 `#
b110000 W
b110000 Y#
b110000 f#
b100000 H
b100000 N#
b100000 r#
b11100 M
b11100 M#
b100100 K
b100100 ^"
b100100 H#
b100000 P
b100000 ]"
b100000 G#
b101000 J
b101000 V"
b101000 ,#
b100100 O
b100100 X"
b100100 +#
b100100 R#
b100100 b#
b101100 I
b101100 $#
b101100 9#
b101000 N
b101000 %#
b101000 8#
b101100 X
b101100 7#
b101100 D#
b101100 a#
b101100 e#
1!
#115
0!
#120
b110100 L
b110100 6#
b110100 W#
b110100 `#
b110100 W
b110100 Y#
b110100 f#
b110000 X
b110000 7#
b110000 D#
b110000 a#
b110000 e#
b110000 I
b110000 $#
b110000 9#
b101100 N
b101100 %#
b101100 8#
b101100 J
b101100 V"
b101100 ,#
b101000 O
b101000 X"
b101000 +#
b101000 R#
b101000 b#
b101000 K
b101000 ^"
b101000 H#
b100100 P
b100100 ]"
b100100 G#
b100100 H
b100100 N#
b100100 r#
b100000 M
b100000 M#
1!
#125
0!
#130
b111000 L
b111000 6#
b111000 W#
b111000 `#
b111000 W
b111000 Y#
b111000 f#
b101000 H
b101000 N#
b101000 r#
b100100 M
b100100 M#
b101100 K
b101100 ^"
b101100 H#
b101000 P
b101000 ]"
b101000 G#
b110000 J
b110000 V"
b110000 ,#
b101100 O
b101100 X"
b101100 +#
b101100 R#
b101100 b#
b110100 I
b110100 $#
b110100 9#
b110000 N
b110000 %#
b110000 8#
b110100 X
b110100 7#
b110100 D#
b110100 a#
b110100 e#
1!
#135
0!
#140
b111100 L
b111100 6#
b111100 W#
b111100 `#
b111100 W
b111100 Y#
b111100 f#
b111000 X
b111000 7#
b111000 D#
b111000 a#
b111000 e#
b111000 I
b111000 $#
b111000 9#
b110100 N
b110100 %#
b110100 8#
b110100 J
b110100 V"
b110100 ,#
b110000 O
b110000 X"
b110000 +#
b110000 R#
b110000 b#
b110000 K
b110000 ^"
b110000 H#
b101100 P
b101100 ]"
b101100 G#
b101100 H
b101100 N#
b101100 r#
b101000 M
b101000 M#
1!
#145
0!
#150
b1000000 L
b1000000 6#
b1000000 W#
b1000000 `#
b1000000 W
b1000000 Y#
b1000000 f#
b110000 H
b110000 N#
b110000 r#
b101100 M
b101100 M#
b110100 K
b110100 ^"
b110100 H#
b110000 P
b110000 ]"
b110000 G#
b111000 J
b111000 V"
b111000 ,#
b110100 O
b110100 X"
b110100 +#
b110100 R#
b110100 b#
b111100 I
b111100 $#
b111100 9#
b111000 N
b111000 %#
b111000 8#
b111100 X
b111100 7#
b111100 D#
b111100 a#
b111100 e#
1!
#155
0!
#160
b1000100 L
b1000100 6#
b1000100 W#
b1000100 `#
b1000100 W
b1000100 Y#
b1000100 f#
b1000000 X
b1000000 7#
b1000000 D#
b1000000 a#
b1000000 e#
b1000000 I
b1000000 $#
b1000000 9#
b111100 N
b111100 %#
b111100 8#
b111100 J
b111100 V"
b111100 ,#
b111000 O
b111000 X"
b111000 +#
b111000 R#
b111000 b#
b111000 K
b111000 ^"
b111000 H#
b110100 P
b110100 ]"
b110100 G#
b110100 H
b110100 N#
b110100 r#
b110000 M
b110000 M#
1!
#165
0!
#170
b1001000 L
b1001000 6#
b1001000 W#
b1001000 `#
b1001000 W
b1001000 Y#
b1001000 f#
b111000 H
b111000 N#
b111000 r#
b110100 M
b110100 M#
b111100 K
b111100 ^"
b111100 H#
b111000 P
b111000 ]"
b111000 G#
b1000000 J
b1000000 V"
b1000000 ,#
b111100 O
b111100 X"
b111100 +#
b111100 R#
b111100 b#
b1000100 I
b1000100 $#
b1000100 9#
b1000000 N
b1000000 %#
b1000000 8#
b1000100 X
b1000100 7#
b1000100 D#
b1000100 a#
b1000100 e#
1!
#175
0!
#180
b1001100 L
b1001100 6#
b1001100 W#
b1001100 `#
b1001100 W
b1001100 Y#
b1001100 f#
b1001000 X
b1001000 7#
b1001000 D#
b1001000 a#
b1001000 e#
b1001000 I
b1001000 $#
b1001000 9#
b1000100 N
b1000100 %#
b1000100 8#
b1000100 J
b1000100 V"
b1000100 ,#
b1000000 O
b1000000 X"
b1000000 +#
b1000000 R#
b1000000 b#
b1000000 K
b1000000 ^"
b1000000 H#
b111100 P
b111100 ]"
b111100 G#
b111100 H
b111100 N#
b111100 r#
b111000 M
b111000 M#
1!
#185
0!
#190
b1010000 L
b1010000 6#
b1010000 W#
b1010000 `#
b1010000 W
b1010000 Y#
b1010000 f#
b1000000 H
b1000000 N#
b1000000 r#
b111100 M
b111100 M#
b1000100 K
b1000100 ^"
b1000100 H#
b1000000 P
b1000000 ]"
b1000000 G#
b1001000 J
b1001000 V"
b1001000 ,#
b1000100 O
b1000100 X"
b1000100 +#
b1000100 R#
b1000100 b#
b1001100 I
b1001100 $#
b1001100 9#
b1001000 N
b1001000 %#
b1001000 8#
b1001100 X
b1001100 7#
b1001100 D#
b1001100 a#
b1001100 e#
1!
#195
0!
#200
b1010100 L
b1010100 6#
b1010100 W#
b1010100 `#
b1010100 W
b1010100 Y#
b1010100 f#
b1010000 X
b1010000 7#
b1010000 D#
b1010000 a#
b1010000 e#
b1010000 I
b1010000 $#
b1010000 9#
b1001100 N
b1001100 %#
b1001100 8#
b1001100 J
b1001100 V"
b1001100 ,#
b1001000 O
b1001000 X"
b1001000 +#
b1001000 R#
b1001000 b#
b1001000 K
b1001000 ^"
b1001000 H#
b1000100 P
b1000100 ]"
b1000100 G#
b1000100 H
b1000100 N#
b1000100 r#
b1000000 M
b1000000 M#
1!
#205
0!
#210
b1011000 L
b1011000 6#
b1011000 W#
b1011000 `#
b1011000 W
b1011000 Y#
b1011000 f#
b1001000 H
b1001000 N#
b1001000 r#
b1000100 M
b1000100 M#
b1001100 K
b1001100 ^"
b1001100 H#
b1001000 P
b1001000 ]"
b1001000 G#
b1010000 J
b1010000 V"
b1010000 ,#
b1001100 O
b1001100 X"
b1001100 +#
b1001100 R#
b1001100 b#
b1010100 I
b1010100 $#
b1010100 9#
b1010000 N
b1010000 %#
b1010000 8#
b1010100 X
b1010100 7#
b1010100 D#
b1010100 a#
b1010100 e#
1!
#215
0!
#220
b1011100 L
b1011100 6#
b1011100 W#
b1011100 `#
b1011100 W
b1011100 Y#
b1011100 f#
b1011000 X
b1011000 7#
b1011000 D#
b1011000 a#
b1011000 e#
b1011000 I
b1011000 $#
b1011000 9#
b1010100 N
b1010100 %#
b1010100 8#
b1010100 J
b1010100 V"
b1010100 ,#
b1010000 O
b1010000 X"
b1010000 +#
b1010000 R#
b1010000 b#
b1010000 K
b1010000 ^"
b1010000 H#
b1001100 P
b1001100 ]"
b1001100 G#
b1001100 H
b1001100 N#
b1001100 r#
b1001000 M
b1001000 M#
1!
#225
0!
#230
b1100000 L
b1100000 6#
b1100000 W#
b1100000 `#
b1100000 W
b1100000 Y#
b1100000 f#
b1010000 H
b1010000 N#
b1010000 r#
b1001100 M
b1001100 M#
b1010100 K
b1010100 ^"
b1010100 H#
b1010000 P
b1010000 ]"
b1010000 G#
b1011000 J
b1011000 V"
b1011000 ,#
b1010100 O
b1010100 X"
b1010100 +#
b1010100 R#
b1010100 b#
b1011100 I
b1011100 $#
b1011100 9#
b1011000 N
b1011000 %#
b1011000 8#
b1011100 X
b1011100 7#
b1011100 D#
b1011100 a#
b1011100 e#
1!
#235
0!
#240
b1100100 L
b1100100 6#
b1100100 W#
b1100100 `#
b1100100 W
b1100100 Y#
b1100100 f#
b1100000 X
b1100000 7#
b1100000 D#
b1100000 a#
b1100000 e#
b1100000 I
b1100000 $#
b1100000 9#
b1011100 N
b1011100 %#
b1011100 8#
b1011100 J
b1011100 V"
b1011100 ,#
b1011000 O
b1011000 X"
b1011000 +#
b1011000 R#
b1011000 b#
b1011000 K
b1011000 ^"
b1011000 H#
b1010100 P
b1010100 ]"
b1010100 G#
b1010100 H
b1010100 N#
b1010100 r#
b1010000 M
b1010000 M#
1!
#245
0!
#250
b1101000 L
b1101000 6#
b1101000 W#
b1101000 `#
b1101000 W
b1101000 Y#
b1101000 f#
b1011000 H
b1011000 N#
b1011000 r#
b1010100 M
b1010100 M#
b1011100 K
b1011100 ^"
b1011100 H#
b1011000 P
b1011000 ]"
b1011000 G#
b1100000 J
b1100000 V"
b1100000 ,#
b1011100 O
b1011100 X"
b1011100 +#
b1011100 R#
b1011100 b#
b1100100 I
b1100100 $#
b1100100 9#
b1100000 N
b1100000 %#
b1100000 8#
b1100100 X
b1100100 7#
b1100100 D#
b1100100 a#
b1100100 e#
1!
#255
0!
#260
b1101100 L
b1101100 6#
b1101100 W#
b1101100 `#
b1101100 W
b1101100 Y#
b1101100 f#
b1101000 X
b1101000 7#
b1101000 D#
b1101000 a#
b1101000 e#
b1101000 I
b1101000 $#
b1101000 9#
b1100100 N
b1100100 %#
b1100100 8#
b1100100 J
b1100100 V"
b1100100 ,#
b1100000 O
b1100000 X"
b1100000 +#
b1100000 R#
b1100000 b#
b1100000 K
b1100000 ^"
b1100000 H#
b1011100 P
b1011100 ]"
b1011100 G#
b1011100 H
b1011100 N#
b1011100 r#
b1011000 M
b1011000 M#
1!
#265
0!
#270
b1110000 L
b1110000 6#
b1110000 W#
b1110000 `#
b1110000 W
b1110000 Y#
b1110000 f#
b1100000 H
b1100000 N#
b1100000 r#
b1011100 M
b1011100 M#
b1100100 K
b1100100 ^"
b1100100 H#
b1100000 P
b1100000 ]"
b1100000 G#
b1101000 J
b1101000 V"
b1101000 ,#
b1100100 O
b1100100 X"
b1100100 +#
b1100100 R#
b1100100 b#
b1101100 I
b1101100 $#
b1101100 9#
b1101000 N
b1101000 %#
b1101000 8#
b1101100 X
b1101100 7#
b1101100 D#
b1101100 a#
b1101100 e#
1!
#275
0!
#280
b1110100 L
b1110100 6#
b1110100 W#
b1110100 `#
b1110100 W
b1110100 Y#
b1110100 f#
b1110000 X
b1110000 7#
b1110000 D#
b1110000 a#
b1110000 e#
b1110000 I
b1110000 $#
b1110000 9#
b1101100 N
b1101100 %#
b1101100 8#
b1101100 J
b1101100 V"
b1101100 ,#
b1101000 O
b1101000 X"
b1101000 +#
b1101000 R#
b1101000 b#
b1101000 K
b1101000 ^"
b1101000 H#
b1100100 P
b1100100 ]"
b1100100 G#
b1100100 H
b1100100 N#
b1100100 r#
b1100000 M
b1100000 M#
1!
#285
0!
#290
b1111000 L
b1111000 6#
b1111000 W#
b1111000 `#
b1111000 W
b1111000 Y#
b1111000 f#
b1101000 H
b1101000 N#
b1101000 r#
b1100100 M
b1100100 M#
b1101100 K
b1101100 ^"
b1101100 H#
b1101000 P
b1101000 ]"
b1101000 G#
b1110000 J
b1110000 V"
b1110000 ,#
b1101100 O
b1101100 X"
b1101100 +#
b1101100 R#
b1101100 b#
b1110100 I
b1110100 $#
b1110100 9#
b1110000 N
b1110000 %#
b1110000 8#
b1110100 X
b1110100 7#
b1110100 D#
b1110100 a#
b1110100 e#
1!
#295
0!
#300
b1111100 L
b1111100 6#
b1111100 W#
b1111100 `#
b1111100 W
b1111100 Y#
b1111100 f#
b1111000 X
b1111000 7#
b1111000 D#
b1111000 a#
b1111000 e#
b1111000 I
b1111000 $#
b1111000 9#
b1110100 N
b1110100 %#
b1110100 8#
b1110100 J
b1110100 V"
b1110100 ,#
b1110000 O
b1110000 X"
b1110000 +#
b1110000 R#
b1110000 b#
b1110000 K
b1110000 ^"
b1110000 H#
b1101100 P
b1101100 ]"
b1101100 G#
b1101100 H
b1101100 N#
b1101100 r#
b1101000 M
b1101000 M#
1!
#302
